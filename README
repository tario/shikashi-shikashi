= Shikashi-shikashi - permissions package to use shikashi inside shikashi sandbox

Shikashi-shikashi provides the permissions needed to use the shikashi sandbox API from within the sandbox.

Actually shikashi sandbox do not supports the creation and execution of nested sandbox in the conventional way.
Because of this shikashi-shikashi implements an emulation of the sandbox.

== Installation

=== Prerequisites

* shikashi >= 0.1.0 (found at http://github.com/tario/shikashi)

=== Gem installation

* Download the last version of the gem from http://github.com/tario/shikashi-shikashi/downloads
* Install the gem with the following;

gem install shikashi-shikashi-X.X.X.gem.

== Documentation

Full API documentation can be found on:
http://tario.github.com/shikashi-shikashi/doc/

== Usage

It's very simple, shikashi-shikashi adds an "allow_shikashi" method to Shikashi::Privilege class, this methods must
be invoqued to the privileges passed to the main sandbox in order to allow the creation and execution of nested
sandboxes from within the main sandbox.

The code executed in the nested sandbox has the restrictions defined with the privileges API added to the restrictions
defined to the container sandbox (i.e. the code executed in main sandbox can't give permission to execute the
system method if it has no permissions to do that)

In brief:

* The container sandbox can give permissions to execute methods defined in the same sandbox
* The container sandbox can give permissions to execute methods defined outside the sandbox if it has
the same permissions too
* Any sandbox can call any method defined in the same code without specific permisions

=== Example

	require "rubygems"
	require "shikashi"
	require "shikashi-shikashi"

	include Shikashi

	class X
		def foo
			print "external foo\n"
		end
	end

	sandbox = Sandbox.new
	privileges = Privileges.new

	privileges.allow_shikashi

	privileges.object(self).allow :print
	privileges.object(X).allow :new
	privileges.instances_of(X).allow :foo

	# for the recue
	privileges.allow_method :===

	sandbox.run "
		x = X.new
		x.foo

		sandbox = Sandbox.new
		privileges = Privileges.new
		privileges.allow_method :print

		sandbox.run privileges, 'print \"hello world\\n\"'

		begin
			sandbox.run privileges, 'X.new.foo' # disallowed
		rescue SecurityError
			print \"security error\\n\"
		end

		class X
			def foo
				print \"inside foo\\n\"
			end
		end

	", privileges

